plugins {
    id 'application'
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'com.google.guava:guava:29.0-jre'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'org.assertj:assertj-core:3.20.2'
    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation('org.mockito:mockito-inline:3.4.0')
}

application {
    mainClass = 'nextstep.jwp.JwpApplication'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy (jacocoTestReport) // 테스트가 먼저 실행되고 리포트가 작동된다.
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    dependsOn test // 리포트가 만들어지기 전 테스트 실행되어야 한다.
    reports {
        html.enabled true
        csv.enabled true
        xml.enabled true
        xml.destination(new File("jacoco/jacoco.xml"))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification { // 코드 커버리지 측정항목 시행
    violationRules { // 위반 규칙
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "woowacourse_be-jwp-http-server"
        property "sonar.organization", "woowacourse"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "jacoco/jacoco.xml"
    }
}
